name: "docomo_pattern_CNN"

#########################  Data layers ##############################

layer {
  name: "pattern"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "PATTERN/pattern_train_lmdb"
    backend: LMDB
    batch_size: 50
  }
  transform_param {
#    mean_file: "PATTERN/extra/pattern_mean.binaryproto"
	mean_value: 103.939
	mean_value: 116.779
	mean_value: 123.68
    mirror: true
  }
  include: { phase: TRAIN }
}


layer {
  name: "pattern"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "PATTERN/pattern_val_lmdb"
    backend: LMDB
    batch_size: 30
  }
  transform_param {
#    mean_file: "PATTERN/extra/pattern_mean.binaryproto"
	mean_value: 103.939
	mean_value: 116.779
	mean_value: 123.68
    mirror: false
  }
  include: { phase: TEST }
}


#########################  Convolutional layers ##############################

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}


layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}


layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05
    beta: 0.75
  }
}

#layer {
#  name: "norm1"
#  type: "BatchNorm"
#  bottom: "pool1"
#  top: "norm1"
#  batch_norm_param {
#    use_global_stats: true
#  }
#}


layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}


layer {
  name: "relu2"
  type: "ReLU"
  bottom: "pool2"
  top: "pool2"
}

#layer {
#  name: "norm2"
#  type: "BatchNorm"
#  bottom: "pool2"
#  top: "norm2"
#  batch_norm_param {
#    use_global_stats: true
#  }
#}

layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    norm_region: WITHIN_CHANNEL
    local_size: 3
    alpha: 5e-05
    beta: 0.75
  }
}


layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}


layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}

layer {  
  name: "dropout_conv3"  
  type: "Dropout"  
  bottom: "pool3"  
  top: "dropout_conv3" 
  dropout_param {  
    dropout_ratio: 0.5  
  }  
}


#########################  Full connection layers ##############################
#########################          IP500          ##############################

layer {
  name: "ip500"
  type: "InnerProduct"
  bottom: "dropout_conv3"
  top: "ip500"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 500
    weight_filler {
#	   type: "xavier"
	   type: "gaussian"
	   std: 0.005
    }
    bias_filler {
      type: "constant"
	  value: 0.1
    }
  }
}


layer {
  name: "relu_ip500"
  type: "ReLU"
  bottom: "ip500"
  top: "ip500"
}


layer {  
  name: "dropout_ip500"  
  type: "Dropout"  
  bottom: "ip500"  
  top: "ip500" 
  dropout_param {  
    dropout_ratio: 0.5  
  }  
}


#########################          IP_hash          ##############################


layer {
  name: "ip_hash"
  type: "InnerProduct"
  bottom: "ip500"
  top: "ip_hash"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 12
    weight_filler {
#	  type: "xavier"
      type: "gaussian"
	  std: 0.005
    }
    bias_filler {
      type: "constant"
	  value: 0.1
    }
  }
}


#layer {
#  name: "relu_ip_hash"
#  type: "ReLU"
#  bottom: "ip_hash"
#  top: "ip_hash"
#}


#########################          IP_Softmax          ##############################


layer {
  name: "ip_classification"
  type: "InnerProduct"
  bottom: "ip500"
  top: "ip_classification"
  param {
	lr_mult: 1
	decay_mult: 1
  }
  param {
	lr_mult: 2
	decay_mult: 0
  }
  inner_product_param {
	num_output: 7
	weight_filler {
#	  type: "xavier"
	  type: "gaussian"
	  std: 0.005
	}
    bias_filler {
      type: "constant"
	  value: 0.1
	}
  }
}


#layer {
#  name: "relu_ip_classification"
#  type: "ReLU"
#  bottom: "ip_classification"
#  top: "ip_classification"
#}



#########################  Loss layers ##############################

layer {
  name: "loss_hash"
  type: "HashingLoss"
  hashing_loss_param {
    bi_margin: 24.0
    tradeoff: 0.01
  }
  bottom: "ip_hash"
  bottom: "label"
  top: "loss_hash"
  loss_weight: 0.1
}


layer {
  name: "loss_classification"
  type: "SoftmaxWithLoss"
  top: "loss_classification"
  bottom: "ip_classification"
  bottom: "label"
}


#########################  Accuracy layers ##############################

layer {
  name: "accuracy_at_1"
  type: "Accuracy"
  bottom: "ip_classification"
  bottom: "label"
  top: "accuracy_at_1"
  accuracy_param {
	top_k: 1
  }
  include: {
	phase: TEST
  }
}


layer {
  name: "accuracy_at_5"
  type: "Accuracy"
  bottom: "ip_classification"
  bottom: "label"
  top: "accuracy_at_5"
  accuracy_param {
	top_k: 5
  }
  include: {
	phase: TEST
  }
}
